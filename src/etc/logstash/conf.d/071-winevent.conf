filter {
    if [agent][type] == "winlogbeat" and [winlog][api] == "wineventlog" {
        if ![@metadata][processor] {
            mutate { add_field => { "[@metadata][processor]" => "winevent" } }
        }
        mutate { add_field => { "[@metadata][empty_trash]" => true } }
        mutate {
            gsub => [
                "[winlog][event_data][OperationType]", "[\%\%]", "",
                "[winlog][event_data][AccessList]", "[\%\%]", "",
                "[winlog][event_data][Properties]", "[\%\%]", "",
                "[winlog][event_data][ElevatedToken]", "[\%\%]", "",
                "[winlog][event_data][ImpersonationLevel]", "[\%\%]", "",
                "[winlog][event_data][VirtualAccount]", "[\%\%]", ""
            ]
        }
        grok {
            match => {
                "message" => ["%{IPV4:winlog.event_data.IpAddress}"]
            }
        }
        translate {
            id => "windows_security_event"
            dictionary_path => "/etc/logstash/dictionaries/windows_security_events.yml"
            field => "[winlog][event_id]"
            destination => "[winlog][event_desc]"
            override => true
            refresh_behaviour => "merge"
        }
        translate {
            id => "windows_remote_desktop"
            dictionary_path => "/etc/logstash/dictionaries/windows_remote_desktop.yml"
            field => "[winlog][event_id]"
            destination => "[winlog][event_desc]"
            override => true
            refresh_behaviour => "merge"
        }
        translate {
            id => "windows_logon_event"
            dictionary_path => "/etc/logstash/dictionaries/windows_logon_events.yml"
            field => "[winlog][event_data][LogonType]"
            destination => "[winlog][event_data][LogonTypeDesc]"
            override => true
            refresh_behaviour => "merge"
        }
        translate {
            id => "windows_logon_desc"
            dictionary_path => "/etc/logstash/dictionaries/windows_logon_status.yml"
            field => "[winlog][event_data][Status]"
            destination => "[winlog][event_data][StatusDesc]"
            override => true
            refresh_behaviour => "merge"
        }
        translate {
            id => "windows_logon_ext_status"
            dictionary_path => "/etc/logstash/dictionaries/windows_logon_status.yml"
            field => "[winlog][event_data][SubStatus]"
            destination => "[winlog][event_data][SubStatusDesc]"
            override => true
            refresh_behaviour => "merge"
        }
        mutate {
            remove_field => "[winlog][event_data][IpAddress]"
        }
        grok {
            match => { "message" => ["%{IPV4:ipv4_address}"] }
            add_field => {
                "[winlog][event_data][IpAddress]" => "%{ipv4_address}"
                "[source][ip]" => "%{ipv4_address}"
            }
            remove_field => "ipv4_address"
        }
        if [winlog][event_desc] {
            if "LOW" in [winlog][event_desc] {
                mutate {
                    add_field => {"[winlog][event_risk]" => "LOW"}
                }
            } else if "MEDIUM" in [winlog][event_desc] {
                mutate {
                    add_field => {"[winlog][event_risk]" => "MEDIUM"}
                }
            } else if "HIGH" in [winlog][event_desc] {
                mutate {
                    add_field => {"[winlog][event_risk]" => "HIGH"}
                }
            } else {
                mutate {
                    add_field => {"[winlog][event_risk]" => "UNKNOWN"}
                }
            }
        }
        if "14674" in [winlog][event_data][OperationType] {
            mutate {
                add_field => {"[winlog][event_data][AttributeChangeType]" => "ADD"}
            }
        }
        if "14675" in [winlog][event_data][OperationType] {
            mutate {
                add_field => {"[winlog][event_data][AttributeChangeType]" => "DELETE"}
            }
        }
        if "14676" in [winlog][event_data][DSType] {
            mutate {
                update => {"[winlog][event_data][DSType]" => "Active Directory Domain Services"}
            }
        }
        if [source_name] == "PowerShell" {
            grok {
                patterns_dir => "/etc/logstash/patterns"
                match => {"message" => "%{PWRSHELL:scriptname}"}
                add_field => {"[winlog][powershell][alert]" => "true"}
            }
        }
        # Add SIEM data fields
        if [winlog][event_id] == 4624 or [winlog][event_id] == 4625 or [winlog][event_id] == 4771 {
            mutate {
                add_field => {"[event][category]" => "authentication"}
            }
            if [winlog][event_data][LogonProcessName] == "Authz" {
                mutate {
                    add_field => {
                        "[user][id]" => "%{[winlog][event_data][SubjectUserSid]}"
                        "[user][name]" => "%{[winlog][event_data][SubjectUserName]}"
                        "[user][domain]" => "%{[winlog][event_data][SubjectDomainName]}"
                    }
                }
            } else {
                mutate {
                    add_field => {
                        "[user][id]" => "%{[winlog][event_data][TargetUserSid]}"
                        "[user][name]" => "%{[winlog][event_data][TargetUserName]}"
                        "[user][domain]" => "%{[winlog][event_data][TargetDomainName]}"
                        "[system][audit][who]" => "%{[winlog][event_data][TargetUserName]}"
                        "[system][audit][what]" => "%{[winlog][event_desc]}"
                        "[system][audit][action]" => "%{[event][action]}"
                        "[system][audit][when]" => "%{[event][created]}"
                        "[system][audit][client_ip]" => "%{[source][ip]}"
                        "[system][audit][server_ip]" => "%{[agent][hostname]}"
                    }
                }
                dns {
                    resolve  => ["[system][audit][server_ip]"]
                    action => "replace"
                    nameserver => "10.10.10.10"
                    hit_cache_size => "25000"
                    hit_cache_ttl => "3600"
                    failed_cache_size => "75000"
                    failed_cache_ttl => "86400"

                }
            }
            if [winlog][event_id] == 4624 {
                mutate {
                    add_field => {
                        "[winlog][event_logon]" => "success"
                        "[event][type]" => "authentication_success"
                        "[system][audit][logon]" => "success"
                        "[system][audit][outcome]" => "success"
                    }
                    add_tag => ["logon_success"]
                }
            }
            if [winlog][event_id] == 4625 or [winlog][event_id] == 4771 {
                mutate {
                    add_field => {
                        "[winlog][event_logon]" => "failed"
                        "[event][type]" => "authentication_failure"
                        "[system][audit][logon]" => "failed"
                        "[system][audit][outcome]" => "failed"
                        "[zabbix][key]" => "logstash"
                        "[zabbix][value]" => "%{message}"
                    }
                    add_tag => ["logon_failure","zbx"]
                }
            }
        }
        if [winlog][event_data][LogonType] {
            mutate {
                add_field => {"[winlog][logon][type]" => "%{[winlog][event_data][LogonTypeDesc]}"}
            }
        }
        if [winlog][event_data][Status] {
            mutate {
                add_field => {"[winlog][logon][failure][status]" => "%{[winlog][event_data][StatusDesc]}"}
            }
        }
        if [winlog][event_data][SubStatus] {
            mutate {
                add_field => {"[winlog][logon][failure][sub_status]" => "%{[winlog][event_data][SubStatusDesc]}"}
            }
        }
        if [winlog][event_data][IpPort] {
            if [winlog][event_data][IpPort] == "-" {
                mutate {
                    add_field => {"[source][port]" => "0"}
                }
            } else {
                mutate {
                    add_field => {"[source][port]" => "%{[winlog][event_data][IpPort]}"}
                }
            }
        }
        if [winlog][event_data][WorkstationName] {
            mutate {
                add_field => {"[source][domain]" => "%{[winlog][event_data][WorkstationName]}"}
            }
        }
        if [winlog][task] == "Registry" {
            mutate {
                add_tag => ["junk"]
            }
        }
        if [winlog][event_data][SubjectUserName] =~ /\$/ or [winlog][event_data][TargetUserName] =~ /\$/ {
            mutate {
                add_tag => ["junk"]
            }
        }
        mutate {
            remove_field => "message"
            remove_tag => ["beats_input_codec_plain_applied","_grokparsefailure"]
            add_tag => ["_grokd","windows","audit"]
        }
    }
}